from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from .keyboards import (
    get_main_keyboard,
    get_payment_methods_keyboard,
    get_tariffs_keyboard,
    get_admin_keyboard
)
from .states import SubscriptionStates, AdminStates
from app.database import async_session
from app.crud import (
    get_user_by_telegram_id,
    create_user,
    get_active_subscription,
    get_active_tariffs,
    create_subscription,
    update_user
)
from app.payments.cryptocloud import create_cryptocloud_payment
from app.payments.yookassa import create_yookassa_payment
from app.frp.utils import generate_unique_subdomain
import uuid
import logging

router = Router()
logger = logging.getLogger(__name__)

@router.message(Command("start"))
async def start(message: Message):
    async with async_session() as db:
        user = await get_user_by_telegram_id(db, message.from_user.id)
        if not user:
            user = await create_user(db, {
                "telegram_id": message.from_user.id,
                "username": message.from_user.username,
                "full_name": message.from_user.full_name
            })
    
    await message.answer(
        "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ FRP —Å–µ—Ä–≤–µ—Ä–∞–º.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É –∏ –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—É–±–¥–æ–º–µ–Ω.",
        reply_markup=get_main_keyboard(user.is_admin if user else False)
    )

@router.message(F.text == "üîÑ –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏")
async def subscription_status(message: Message):
    async with async_session() as db:
        subscription = await get_active_subscription(db, message.from_user.id)
        
        if subscription:
            await message.answer(
                f"üìù –í–∞—à —Ç–∞—Ä–∏—Ñ: {subscription.tariff.name}\n"
                f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {subscription.tariff.price}‚ÇΩ\n"
                f"‚è≥ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {subscription.end_date.strftime('%d.%m.%Y %H:%M')}\n"
                f"üåê –í–∞—à —Å—É–±–¥–æ–º–µ–Ω: {subscription.subdomain}.frp.example.com"
            )
        else:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.")

@router.message(F.text == "üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
async def buy_subscription(message: Message, state: FSMContext):
    async with async_session() as db:
        tariffs = await get_active_tariffs(db)
    
    if not tariffs:
        return await message.answer("üò¢ –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤")
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:", reply_markup=get_tariffs_keyboard(tariffs))
    await state.set_state(SubscriptionStates.CHOOSING_TARIFF)

@router.callback_query(F.data.startswith("tariff_"))
async def process_tariff(callback: CallbackQuery, state: FSMContext):
    tariff_id = int(callback.data.split("_")[1])
    await state.update_data(tariff_id=tariff_id)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É:", reply_markup=get_payment_methods_keyboard())
    await state.set_state(SubscriptionStates.CHOOSING_PAYMENT)

@router.callback_query(F.data.in_(["cryptocloud", "yookassa"]))
async def process_payment(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    tariff_id = data['tariff_id']
    user_id = callback.from_user.id
    
    async with async_session() as db:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∞—Ä–∏—Ñ
        tariff = await get_tariff(db, tariff_id)
        if not tariff:
            return await callback.message.answer("‚ùå –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å—É–±–¥–æ–º–µ–Ω
        subdomain = await generate_unique_subdomain(db)
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É (–ø–æ–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω—É—é)
        payment_id = str(uuid.uuid4())
        subscription = await create_subscription(db, {
            "user_id": user_id,
            "tariff_id": tariff_id,
            "subdomain": subdomain,
            "payment_id": payment_id
        })
        
        if not subscription:
            return await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏")
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        payment_url = None
        if callback.data == "cryptocloud":
            payment_url = create_cryptocloud_payment(tariff.price, payment_id)
        elif callback.data == "yookassa":
            payment_url = create_yookassa_payment(
                tariff.price,
                f"–ü–æ–¥–ø–∏—Å–∫–∞ {tariff.name}",
                payment_id,
                "https://t.me/your_bot"
            )
        
        if payment_url:
            await callback.message.answer(
                f"üí∏ –î–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: [–û–ø–ª–∞—Ç–∏—Ç—å]({payment_url})",
                parse_mode="Markdown"
            )
        else:
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞")
    
    await state.clear()

@router.message(F.text == "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel(message: Message):
    async with async_session() as db:
        user = await get_user_by_telegram_id(db, message.from_user.id)
        if not user or not user.is_admin:
            return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
    
    await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=get_admin_keyboard())

@router.message(F.text == "üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞–º–∏")
async def manage_tariffs(message: Message):
    async with async_session() as db:
        user = await get_user_by_telegram_id(db, message.from_user.id)
        if not user or not user.is_admin:
            return
        
        tariffs = await get_active_tariffs(db)
        response = "üìä –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤:\n\n"
        for tariff in tariffs:
            response += f"‚Ä¢ {tariff.name} - {tariff.price}‚ÇΩ ({tariff.duration_days} –¥–Ω–µ–π)\n"
        
        await message.answer(response)

@router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def back_to_main_menu(message: Message):
    async with async_session() as db:
        user = await get_user_by_telegram_id(db, message.from_user.id)
    
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard(user.is_admin if user else False))

@router.message(F.text)
async def admin_password(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    from app.config import settings
    
    if message.text == settings.ADMIN_PASSWORD:
        async with async_session() as db:
            user = await get_user_by_telegram_id(db, message.from_user.id)
            if user:
                await update_user(db, user.id, {"is_admin": True})
                await message.answer("‚úÖ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", reply_markup=get_main_keyboard(True))